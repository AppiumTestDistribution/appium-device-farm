{"version":3,"sources":["Device.js","Devices.js","DevicesContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Device","device","platform","name","udid","busy","sdk","realDevice","class","icon","faAndroid","color","faApple","OverlayTrigger","placement","overlay","Tooltip","id","faMobileAlt","className","faDesktop","Devices","devices","map","DevicesContainer","useState","loading","setLoading","setDevices","error","setError","useEffect","fetch","then","res","json","faTruckLoading","size","faSkullCrossbones","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAmEeA,EA5DA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEVC,EACAD,EADAC,SAAUC,EACVF,EADUE,KAAMC,EAChBH,EADgBG,KAAMC,EACtBJ,EADsBI,KAAMC,EAC5BL,EAD4BK,IAAKC,EACjCN,EADiCM,WAErC,OACI,8BACI,sBAAKC,MAAM,iFAAX,UACI,qBAAKA,MAAM,mBAAX,SAEqB,YAAbN,EACI,cAAC,IAAD,CAAiBO,KAAMC,IAAWC,MAAM,UACxC,cAAC,IAAD,CAAiBF,KAAMG,QAGnC,qBAAKJ,MAAM,6BAAX,SACI,cAACK,EAAA,EAAD,CACIC,UAAU,SACVC,QACI,cAACC,EAAA,EAAD,CAASC,GAAE,iBAAX,SACKb,IAJb,SAOI,8BACKD,EAAI,UAAMA,EAAN,mBAAqBG,EAArB,KAA8BF,QAI/C,qBAAKI,MAAM,mBAAX,SAEQD,EACI,gCACI,cAAC,IAAD,CAAiBE,KAAMS,IAAaP,MAAM,SAC1C,sBAAMQ,UAAU,aAAhB,2BAGJ,gCACI,cAAC,IAAD,CAAiBV,KAAMW,IAAWT,MAAM,SACxC,sBAAMQ,UAAU,aAAhB,+BAIhB,qBAAKX,MAAM,mBAAX,SAEQH,EACI,gCACI,cAAC,IAAD,CAAiBI,KAAMS,IAAaP,MAAM,QAC1C,sBAAMQ,UAAU,cAAhB,yBAGJ,gCACI,cAAC,IAAD,CAAiBV,KAAMS,IAAaP,MAAM,UAC1C,sBAAMQ,UAAU,eAAhB,iCClDjBE,EANC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OAAO,8BACFA,EAAQC,KAAI,SAAAtB,GAAM,OAAI,cAAC,EAAD,CAAQA,OAAQA,UCwChCuB,EAvCU,WAAO,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAEGF,mBAAS,IAFZ,mBAEpBH,EAFoB,KAEXM,EAFW,OAGDH,mBAAS,IAHR,mBAGpBI,EAHoB,KAGbC,EAHa,KAkB3B,OAbAC,qBAAU,WACNC,MAAM,iBACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAX,GACFK,GAAW,GACXC,EAAWN,MACZ,SAAAO,GACCF,GAAW,GACXG,GAAS,QAGlB,IAECJ,EAEI,sBAAKlB,MAAM,mDAAX,UACI,qBAAKA,MAAM,mBAAX,SACI,cAAC,IAAD,CAAiBC,KAAM2B,IAAgBC,KAAK,KAAK1B,MAAM,YAE3D,qBAAKH,MAAM,mBAAX,qCAGDqB,EACA,sBAAKrB,MAAM,mDAAX,UACH,qBAAKA,MAAM,mBAAX,SACI,cAAC,IAAD,CAAiBC,KAAM6B,IAAmBD,KAAK,KAAK1B,MAAM,UAE9D,qBAAKH,MAAM,mBAAX,+CAGG,cAAC,EAAD,CAASc,QAASA,KChClBiB,EALH,kBACV,gCACE,oBAAIpB,UAAU,iBAAd,kCACA,cAAC,EAAD,QCMWqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e63693f2.chunk.js","sourcesContent":["import { OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport './Device.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAndroid, faApple } from '@fortawesome/free-brands-svg-icons'\nimport { faMobileAlt, faDesktop } from '@fortawesome/free-solid-svg-icons'\n\nconst Device = ({ device }) => {\n    const {\n        platform, name, udid, busy, sdk, realDevice\n    } = device\n    return (\n        <div>\n            <div class=\"d-flex flex-row bd-highlight mb-1 justify-content-between device-row ml-2 mr-2\">\n                <div class=\"p-2 bd-highlight\">\n                    {\n                        platform === 'android' ?\n                            <FontAwesomeIcon icon={faAndroid} color='green' /> :\n                            <FontAwesomeIcon icon={faApple} />\n                    }\n                </div>\n                <div class=\"p-2 bd-highlight flex-fill\">\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={\n                            <Tooltip id={`tooltip-bottom`}>\n                                {udid}\n                            </Tooltip>\n                        }>\n                        <div>\n                            {name ? `${name} (SDK - ${sdk})` : udid}\n                        </div>\n                    </OverlayTrigger>\n                </div>\n                <div class=\"p-2 bd-highlight\">\n                    {\n                        realDevice?\n                            <div>\n                                <FontAwesomeIcon icon={faMobileAlt} color='grey' />\n                                <span className=\"text-muted\">&nbsp;Mobile</span>\n                            </div>\n                            :\n                            <div>\n                                <FontAwesomeIcon icon={faDesktop} color='grey' />\n                                <span className=\"text-muted\">&nbsp;Emulated</span>\n                            </div>\n                    }\n                </div>\n                <div class=\"p-2 bd-highlight\">\n                    {\n                        busy ?\n                            <div>\n                                <FontAwesomeIcon icon={faMobileAlt} color='red' />\n                                <span className=\"text-danger\">&nbsp;Busy</span>\n                            </div>\n                            :\n                            <div>\n                                <FontAwesomeIcon icon={faMobileAlt} color='green' />\n                                <span className=\"text-success\">&nbsp;Free</span>\n                            </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Device;","import Device from './Device'\n\nconst Devices = ({ devices }) => {\n    return <div>\n        {devices.map(device => <Device device={device} />)}\n    </div>\n}\n\nexport default Devices;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useEffect, useState } from \"react\"\nimport { faTruckLoading, faSkullCrossbones } from '@fortawesome/free-solid-svg-icons'\nimport Devices from './Devices'\n\nconst DevicesContainer = () => {\n    const [loading, setLoading] = useState(true);\n    const [devices, setDevices] = useState([]);\n    const [error, setError] = useState(\"\");\n\n    useEffect(() => {\n        fetch(\"./sample.json\")\n            .then(res => res.json())\n            .then(devices => {\n                setLoading(false);\n                setDevices(devices);\n            }, error => {\n                setLoading(false);\n                setError(true);\n            }\n            )\n    }, []);\n\n    if (loading) {\n        return (\n            <div class=\"d-flex flex-column bd-highlight mt-4 text-center\">\n                <div class=\"p-2 bd-highlight\">\n                    <FontAwesomeIcon icon={faTruckLoading} size=\"9x\" color='green' />\n                </div>\n                <div class=\"p-2 bd-highlight\">Loading your devices</div>\n            </div>\n        )\n    } else if (error) {\n        return <div class=\"d-flex flex-column bd-highlight mb-4 text-center\">\n            <div class=\"p-2 bd-highlight\">\n                <FontAwesomeIcon icon={faSkullCrossbones} size=\"9x\" color='red' />\n            </div>\n            <div class=\"p-2 bd-highlight\">Muhahahah Something went wrong</div>\n        </div>\n    } else {\n        return <Devices devices={devices} />\n    }\n}\n\nexport default DevicesContainer;","import './App.css';\nimport DevicesContainer from './DevicesContainer'\n\nconst App = () =>\n  <div>\n    <h1 className=\"mb-4 mt-4 ml-2\">Appium Device Plugin</h1>\n    <DevicesContainer />\n  </div>\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}