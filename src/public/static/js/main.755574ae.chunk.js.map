{"version":3,"sources":["Device.js","Devices.js","DevicesContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Device","device","platform","name","udid","busy","sdk","realDevice","class","icon","faAndroid","color","faApple","OverlayTrigger","placement","overlay","Tooltip","id","faMobileAlt","className","faDesktop","Devices","devices","map","DevicesContainer","useState","loading","setLoading","setDevices","error","setError","useEffect","fetch","then","res","json","faTruckLoading","size","faSkullCrossbones","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUA0DeA,EAnDA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACRC,EAAgDD,EAAhDC,SAAUC,EAAsCF,EAAtCE,KAAMC,EAAgCH,EAAhCG,KAAMC,EAA0BJ,EAA1BI,KAAMC,EAAoBL,EAApBK,IAAKC,EAAeN,EAAfM,WACzC,OACE,8BACE,sBAAKC,MAAM,iFAAX,UACE,qBAAKA,MAAM,mBAAX,SACgB,YAAbN,EACC,cAAC,IAAD,CAAiBO,KAAMC,IAAWC,MAAM,UAExC,cAAC,IAAD,CAAiBF,KAAMG,QAG3B,qBAAKJ,MAAM,6BAAX,SACE,cAACK,EAAA,EAAD,CACEC,UAAU,SACVC,QAAS,cAACC,EAAA,EAAD,CAASC,GAAE,iBAAX,SAAgCb,IAF3C,SAIE,8BAAMD,EAAI,UAAMA,EAAN,mBAAqBG,EAArB,KAA8BF,QAG5C,qBAAKI,MAAM,mBAAX,SACGD,EACC,gCACE,cAAC,IAAD,CAAiBE,KAAMS,IAAaP,MAAM,SAC1C,sBAAMQ,UAAU,aAAhB,2BAGF,gCACE,cAAC,IAAD,CAAiBV,KAAMW,IAAWT,MAAM,SACxC,sBAAMQ,UAAU,aAAhB,+BAIN,qBAAKX,MAAM,mBAAX,SACGH,EACC,gCACE,cAAC,IAAD,CAAiBI,KAAMS,IAAaP,MAAM,QAC1C,sBAAMQ,UAAU,cAAhB,yBAGF,gCACE,cAAC,IAAD,CAAiBV,KAAMS,IAAaP,MAAM,UAC1C,sBAAMQ,UAAU,eAAhB,iCCrCCE,EAVC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,8BACGA,EAAQC,KAAI,SAACtB,GAAD,OACX,cAAC,EAAD,CAAQA,OAAQA,UC6CTuB,EA3CU,WAAO,IAAD,EACCC,oBAAS,GADV,mBACtBC,EADsB,KACbC,EADa,OAECF,mBAAS,IAFV,mBAEtBH,EAFsB,KAEbM,EAFa,OAGHH,mBAAS,IAHN,mBAGtBI,EAHsB,KAGfC,EAHe,KAoB7B,OAfAC,qBAAU,WACRC,MAAM,YACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACX,GACCK,GAAW,GACXC,EAAWN,MAEb,SAACO,GACCF,GAAW,GACXG,GAAS,QAGd,IAECJ,EAEA,sBAAKlB,MAAM,mDAAX,UACE,qBAAKA,MAAM,mBAAX,SACE,cAAC,IAAD,CAAiBC,KAAM2B,IAAgBC,KAAK,KAAK1B,MAAM,YAEzD,qBAAKH,MAAM,mBAAX,qCAGKqB,EAEP,sBAAKrB,MAAM,mDAAX,UACE,qBAAKA,MAAM,mBAAX,SACE,cAAC,IAAD,CAAiBC,KAAM6B,IAAmBD,KAAK,KAAK1B,MAAM,UAE5D,qBAAKH,MAAM,mBAAX,+CAIG,cAAC,EAAD,CAASc,QAASA,KCtCdiB,EANH,kBACV,gCACE,oBAAIpB,UAAU,iBAAd,kCACA,cAAC,EAAD,QCMWqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.755574ae.chunk.js","sourcesContent":["import { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport './Device.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAndroid, faApple } from '@fortawesome/free-brands-svg-icons';\nimport { faMobileAlt, faDesktop } from '@fortawesome/free-solid-svg-icons';\n\nconst Device = ({ device }) => {\n  const { platform, name, udid, busy, sdk, realDevice } = device;\n  return (\n    <div>\n      <div class=\"d-flex flex-row bd-highlight mb-1 justify-content-between device-row ml-2 mr-2\">\n        <div class=\"p-2 bd-highlight\">\n          {platform === 'android' ? (\n            <FontAwesomeIcon icon={faAndroid} color=\"green\" />\n          ) : (\n            <FontAwesomeIcon icon={faApple} />\n          )}\n        </div>\n        <div class=\"p-2 bd-highlight flex-fill\">\n          <OverlayTrigger\n            placement=\"bottom\"\n            overlay={<Tooltip id={`tooltip-bottom`}>{udid}</Tooltip>}\n          >\n            <div>{name ? `${name} (SDK - ${sdk})` : udid}</div>\n          </OverlayTrigger>\n        </div>\n        <div class=\"p-2 bd-highlight\">\n          {realDevice ? (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"grey\" />\n              <span className=\"text-muted\">&nbsp;Mobile</span>\n            </div>\n          ) : (\n            <div>\n              <FontAwesomeIcon icon={faDesktop} color=\"grey\" />\n              <span className=\"text-muted\">&nbsp;Emulated</span>\n            </div>\n          )}\n        </div>\n        <div class=\"p-2 bd-highlight\">\n          {busy ? (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"red\" />\n              <span className=\"text-danger\">&nbsp;Busy</span>\n            </div>\n          ) : (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"green\" />\n              <span className=\"text-success\">&nbsp;Free</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Device;\n","import Device from './Device';\n\nconst Devices = ({ devices }) => {\n  return (\n    <div>\n      {devices.map((device) => (\n        <Device device={device} />\n      ))}\n    </div>\n  );\n};\n\nexport default Devices;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useEffect, useState } from 'react';\nimport {\n  faTruckLoading,\n  faSkullCrossbones,\n} from '@fortawesome/free-solid-svg-icons';\nimport Devices from './Devices';\n\nconst DevicesContainer = () => {\n  const [loading, setLoading] = useState(true);\n  const [devices, setDevices] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetch('/devices')\n      .then((res) => res.json())\n      .then(\n        (devices) => {\n          setLoading(false);\n          setDevices(devices);\n        },\n        (error) => {\n          setLoading(false);\n          setError(true);\n        }\n      );\n  }, []);\n\n  if (loading) {\n    return (\n      <div class=\"d-flex flex-column bd-highlight mt-4 text-center\">\n        <div class=\"p-2 bd-highlight\">\n          <FontAwesomeIcon icon={faTruckLoading} size=\"9x\" color=\"green\" />\n        </div>\n        <div class=\"p-2 bd-highlight\">Loading your devices</div>\n      </div>\n    );\n  } else if (error) {\n    return (\n      <div class=\"d-flex flex-column bd-highlight mb-4 text-center\">\n        <div class=\"p-2 bd-highlight\">\n          <FontAwesomeIcon icon={faSkullCrossbones} size=\"9x\" color=\"red\" />\n        </div>\n        <div class=\"p-2 bd-highlight\">Muhahahah Something went wrong</div>\n      </div>\n    );\n  } else {\n    return <Devices devices={devices} />;\n  }\n};\n\nexport default DevicesContainer;\n","import './App.css';\nimport DevicesContainer from './DevicesContainer';\n\nconst App = () => (\n  <div>\n    <h1 className=\"mb-4 mt-4 ml-2\">Appium Device Plugin</h1>\n    <DevicesContainer />\n  </div>\n);\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}