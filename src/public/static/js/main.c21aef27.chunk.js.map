{"version":3,"sources":["Device.js","Devices.js","DevicesContainer.js","PendingSessionsCount.js","App.js","reportWebVitals.js","index.js"],"names":["Device","device","platform","name","udid","busy","sdk","realDevice","icon","faAndroid","faApple","OverlayTrigger","placement","overlay","Tooltip","id","class","faMobileAlt","color","faDesktop","className","Devices","devices","filter","toLowerCase","map","DevicesContainer","useState","loading","setLoading","setDevices","error","setError","useEffect","fetch","then","res","json","faTruckLoading","size","faSkullCrossbones","PendingSessionsCount","children","pendingTests","setPendingTests","interval","setInterval","data","clearInterval","App","platformValue","setPlatformValue","DropdownButton","title","onSelect","value","Dropdown","Item","eventKey","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c21aef27.chunk.js","sourcesContent":["import { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAndroid, faApple } from '@fortawesome/free-brands-svg-icons';\nimport { faMobileAlt, faDesktop } from '@fortawesome/free-solid-svg-icons';\n\nconst Device = ({ device }) => {\n  const { platform, name, udid, busy, sdk, realDevice } = device;\n  return (\n    <div>\n        <div>\n          {platform === 'android' ? (\n            <FontAwesomeIcon icon={faAndroid} />\n          ) : (\n            <FontAwesomeIcon icon={faApple} />\n          )}\n        </div>\n        <div>\n          <OverlayTrigger\n            placement=\"bottom\"\n            overlay={<Tooltip id={`tooltip-bottom`}>{udid}</Tooltip>}\n          >\n            <div class=\"names\">{name ? `${name} (SDK - ${sdk})` : `${udid} (SDK - ${sdk})`}</div>\n          </OverlayTrigger>\n        </div>\n        <div>\n          {realDevice ? (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"black\" />\n              <span>&nbsp;Mobile</span>\n            </div>\n          ) : (\n            <div>\n              <FontAwesomeIcon icon={faDesktop} color=\"black\" />\n              <span>&nbsp;Emulated</span>\n            </div>\n          )}\n        </div>\n        <div>\n          {busy ? (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"red\" />\n              <span className=\"text-danger\">&nbsp;Busy</span>\n            </div>\n          ) : (\n            <div>\n              <FontAwesomeIcon icon={faMobileAlt} color=\"green\" />\n              <span className=\"text-success\">&nbsp;Free</span>\n            </div>\n          )}\n        </div>\n      </div>\n  );\n};\n\nexport default Device;\n","import Device from './Device';\n\nconst Devices = ({devices, platform}) => {\n    return (\n        <section class=\"grid-container\">\n            {devices.filter(device => {\n                if (platform.toLowerCase() === \"android\" || platform === \"iOS\")\n                    return device.platform.toLowerCase() === platform.toLowerCase()\n                return device\n            })\n                .map((device) => (\n                    <Device device={device}/>\n                ))}\n        </section>\n    );\n};\n\nexport default Devices;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useEffect, useState } from 'react';\nimport {\n  faTruckLoading,\n  faSkullCrossbones,\n} from '@fortawesome/free-solid-svg-icons';\nimport Devices from './Devices';\n\nconst DevicesContainer = ({platform}) => {\n  const [loading, setLoading] = useState(true);\n  const [devices, setDevices] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetch('/device-farm/api/devices')\n      .then((res) => res.json())\n      .then(\n        (devices) => {\n          setLoading(false);\n          setDevices(devices);\n        },\n        (error) => {\n          setLoading(false);\n          setError(true);\n        }\n      );\n  }, []);\n\n  if (loading) {\n    return (\n      <div class=\"d-flex flex-column bd-highlight mt-4 text-center\">\n        <div class=\"p-2 bd-highlight\">\n          <FontAwesomeIcon icon={faTruckLoading} size=\"9x\" color=\"green\" />\n        </div>\n        <div class=\"p-2 bd-highlight\">Loading your devices</div>\n      </div>\n    );\n  } else if (error) {\n    return (\n      <div class=\"d-flex flex-column bd-highlight mb-4 text-center\">\n        <div class=\"p-2 bd-highlight\">\n          <FontAwesomeIcon icon={faSkullCrossbones} size=\"9x\" color=\"red\" />\n        </div>\n        <div class=\"p-2 bd-highlight\">Muhahahah Something went wrong</div>\n      </div>\n    );\n  } else {\n    return <Devices devices={devices} platform ={platform} />;\n  }\n};\n\nexport default DevicesContainer;\n","import {useEffect, useState} from \"react\";\n\nconst PendingSessionsCount = ({children}) => {\n    const [pendingTests, setPendingTests] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            fetch('/device-farm/api/queue')\n            .then((res) => res.json())\n            .then(\n                (data) => {\n                    setLoading(false);\n                    setPendingTests(data);\n                },\n                (error) => {\n                    setLoading(false);\n                    setError(error);\n                });\n        }, 10000);\n        return () => {\n            clearInterval(interval);\n        };\n    },[] );\n    if (loading) {\n        return (\n            <div>Loading pending tests</div>\n        );\n    } else if (error) {\n        return (\n            <div>Something went wrong</div>\n        );\n    } else {\n        return <div className=\"pending-tests\">{children}Queued Tests : {pendingTests}  </div>;\n    }\n};\nexport default PendingSessionsCount;","import './App.css';\nimport DevicesContainer from './DevicesContainer';\nimport {DropdownButton} from \"react-bootstrap\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport {useState} from \"react\";\nimport PendingSessionsCount from \"./PendingSessionsCount\";\n\nconst App = () => {\n    const [platformValue, setPlatformValue] = useState(\"Platform\");\n    const handleSelect = (value) => {\n        setPlatformValue(value);\n    }\n    return (\n        <div>\n            <div className=\"header\">\n                <h1>Appium Device Farm</h1>\n            </div>\n            <div className=\"box\">\n                <PendingSessionsCount/>\n                <DropdownButton id=\"dropdown\"\n                    title={platformValue}\n                    onSelect={handleSelect}>\n                    <Dropdown.Item eventKey=\"All\">All</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Android\">Android</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"iOS\">iOS</Dropdown.Item>\n                </DropdownButton>\n            </div>\n            <DevicesContainer platform={platformValue}/>\n        </div>\n    )\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}