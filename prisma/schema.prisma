datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Build {
  id        String    @id @default(uuid()) @map("id")
  name      String?   @map("name")
  sessions  Session[] @relation("BuildToSession")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Session {
  id                  String       @id @map("id")
  buildId             String?      @map("build_id")
  build               Build?       @relation("BuildToSession", fields: [buildId], references: [id])
  name                String?      @map("name")
  status              String       @default("running") @map("status")
  desiredCapabilities String       @map("desired_capabilities")
  sessionCapabilities String       @map("session_capabilities")
  nodeId              String       @map("node_id")
  hasLiveVideo        Boolean      @map("has_live_video")
  videoRecording      String?      @map("video_recording")
  deviceLogs          String?      @map("device_logs")
  appProfiling        String?      @map("app_profiling")
  startTime           DateTime     @default(now()) @map("start_time")
  endTime             DateTime?    @map("end_time")
  failureReason       String?      @map("failure_reason")
  deviceUdid          String       @map("device_udid")
  devicePlatform      String       @map("device_platform")
  deviceVersion       String       @map("device_version")
  deviceName          String?      @map("device_name")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")
  sessionLogs         SessionLog[] @relation("SessionToSessionLog")
}

model SessionLog {
  id          String   @id @default(uuid()) @map("id")
  sessionId   String   @map("session_id")
  session     Session  @relation("SessionToSessionLog", fields: [sessionId], references: [id])
  commandName String?  @map("command_name")
  url         String   @map("url")
  method      String   @map("method")
  title       String   @map("title")
  subtitle    String?  @map("subtitle")
  body        String?  @map("body")
  response    String   @map("response")
  screenshot  String?  @map("screenshot")
  isSuccess   Boolean? @map("is_success")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  eventId     String?
}

model TestEventJournal {
  id                 String    @id @default(uuid())
  session_id         String
  event_uuid         String    @unique
  event_type         String
  event_sub_type     String
  name               String
  scopes             String
  result             String?
  started_at         DateTime?
  finished_at        DateTime?
  start_event_doc    String?
  finished_event_doc String?
  file               String
}

model AppInformation {
  id               String   @id @default(uuid())
  fileName         String
  uploadedFileName String
  path             String
  platform         String
  fileSize         String   @default("0")
  appBundleId      String   @default("")
  createdAt        DateTime @default(now()) @map("created_at")
}

model DeviceTags {
  host String
  udid String
  tags String?

  @@unique([host, udid])
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique @map("username")
  password     String       @map("password")
  role         String       @default("user") @map("role") // "admin" or "user"
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  teamMembers  TeamMember[] @relation("UserToTeamMember")
}

model Team {
  id                String             @id @default(uuid())
  name              String             @unique @map("name")
  description       String?            @map("description")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  teamMembers       TeamMember[]       @relation("TeamToTeamMember")
  deviceAllocations DeviceAllocation[] @relation("TeamToDeviceAllocation")
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation("UserToTeamMember", fields: [userId], references: [id], onDelete: Cascade)
  teamId    String   @map("team_id")
  team      Team     @relation("TeamToTeamMember", fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, teamId])
}

model DeviceAllocation {
  id          String   @id @default(uuid())
  deviceUdid  String   @map("device_udid")
  teamId      String   @map("team_id")
  team        Team     @relation("TeamToDeviceAllocation", fields: [teamId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([deviceUdid, teamId])
}
